[{"/Users/user/Documents/study2023/react-todo/src/index.js":"1","/Users/user/Documents/study2023/react-todo/src/App.js":"2","/Users/user/Documents/study2023/react-todo/src/TodoList.js":"3","/Users/user/Documents/study2023/react-todo/src/Todo.js":"4"},{"size":588,"mtime":1683465786033,"results":"5","hashOfConfig":"6"},{"size":2472,"mtime":1683728568544,"results":"7","hashOfConfig":"6"},{"size":372,"mtime":1683641459147,"results":"8","hashOfConfig":"6"},{"size":350,"mtime":1683641573307,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"17g649w",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"/Users/user/Documents/study2023/react-todo/src/index.js",[],[],[],"/Users/user/Documents/study2023/react-todo/src/App.js",["24"],[],"import { useState, useRef } from \"react\";\nimport TodoList from \"./TodoList\";\nimport { v4 as uuidv4 } from \"uuid\"; //ランダムな文字列生成される\n\nfunction App() {\n\n  const [todos, setTodos] = useState([]);\n  // useState=>変数を管理するためのものフックス\n  // todos=>追加していくタスク（オブジェクト）\n  // todosが更新されたら画面が再レンダリングされる（更新される）\n  // つまり無駄な再レンダリングを防げる\n  // setTodos=>todosの中身を更新したいときに使う関数\n\n  const todoNameRef = useRef();\n  // useRef使えば簡単に要素（文字列）を取得できる\n\n  const handleAddTodo = () => {\n    //タスクを追加する\n\n    const name = todoNameRef.current.value; //入力した文字列取得\n\n    if (name === \"\") return; //returnはこれ以上は進みませんという意味。空のタスクは作成できない。\n\n    setTodos((prevTodos) => {\n      return [...prevTodos, {id: uuidv4(), name: name, completed: false}]\n      // ...prevTodos=>今あるタスクたち\n      // {}内=>プラスで追加するタスク\n    });\n\n    todoNameRef.current.value = null; //なぜヌル？\n\n  };\n\n  const toggleTodo = (id) => { //idでどのタスクにチェック入れるのか判別\n    const newTodos = [...todos]; //todosの中のオブジェクトをnewTodosにコピー。\n    const todo = newTodos.find((todo) => todo.id === id); //各todoの中で引数のidと同じidを持つものを探し、const todoのtodoに代入\n    todo.completed = !todo.completed;\n    setTodos(newTodos); //todoリストの更新\n  };\n\n  const handleClear = () => {\n    const newTodos = todos.filter((todo) => !todo.completed); {/* falseのものだけをフィルタリングする（残す） */}\n    setTodos(newTodos);\n  };\n\n  return (\n    <div> {/* このdiv削除するとエラーなる */}\n      <TodoList todos={todos} toggleTodo={toggleTodo} /> {/* todosという名前でtodosという変数を渡してあげてね */}\n      <input type=\"text\" ref={todoNameRef} /> {/* 入力した文字をtodoNameRef関数で取得 */}\n      <button onClick={handleAddTodo}>タスクを追加</button>\n      <button onClick={handleClear}>完了したタスクの削除</button>\n      <div>残りのタスク:{todos.filter((todo) => !todo.completed).length}</div> {/* falseのものだけをフィルタリングする（残す） */}\n    </div>\n  );\n};\n\nexport default App;\n","/Users/user/Documents/study2023/react-todo/src/TodoList.js",[],[],"/Users/user/Documents/study2023/react-todo/src/Todo.js",[],[],{"ruleId":"25","severity":1,"message":"26","line":42,"column":63,"nodeType":"27","messageId":"28","endLine":42,"endColumn":95},"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock"]