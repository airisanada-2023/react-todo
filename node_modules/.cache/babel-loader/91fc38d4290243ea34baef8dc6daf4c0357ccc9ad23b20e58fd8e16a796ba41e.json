{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/study2023/react-todo/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef } from \"react\";\nimport TodoList from \"./TodoList\";\nimport { v4 as uuidv4 } from \"uuid\"; //ランダムな文字列生成される\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [todos, setTodos] = useState([{\n    id: 1,\n    name: \"Todo1\",\n    completed: false\n  }]);\n  // useState=>変数を管理するためのものフックス\n  // todos=>追加していくタスク（オブジェクト）\n  // todosが更新されたら画面が再レンダリングされる（更新される）\n  // つまり無駄な再レンダリングを防げる\n  // setTodos=>todosの中身を更新したいときに使う関数\n\n  const todoNameRef = useRef();\n  // useRef使えば簡単に要素（文字列）を取得できる\n\n  const handleAddTodo = () => {\n    //タスクを追加する\n\n    const name = todoNameRef.current.value; //入力した文字列取得\n\n    setTodos(prevTodos => {\n      return [...prevTodos, {\n        id: uuidv4(),\n        name: name,\n        completed: false\n      }];\n      // ...prevTodos=>今あるタスクたち\n      // {}内=>プラスで追加するタスク\n    });\n\n    todoNameRef.current.value = null; //なぜヌル？\n  };\n\n  const toggleTodo = id => {\n    //idでどのタスクにチェック入れるのか判別\n    const newTodos = [...todos]; //todosの中のオブジェクトをnewTodosにコピー。\n    const todo = newTodos.find(todo => todo.id === id);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\" \", /*#__PURE__*/_jsxDEV(TodoList, {\n      todos: todos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: todoNameRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddTodo,\n      children: \"\\u30BF\\u30B9\\u30AF\\u3092\\u8FFD\\u52A0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"\\u5B8C\\u4E86\\u3057\\u305F\\u30BF\\u30B9\\u30AF\\u306E\\u524A\\u9664\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u6B8B\\u308A\\u306E\\u30BF\\u30B9\\u30AF:0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"XqCssdT6hoz1ftGFmJW7XGGiwEc=\");\n_c = App;\n;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useRef","TodoList","v4","uuidv4","jsxDEV","_jsxDEV","App","_s","todos","setTodos","id","name","completed","todoNameRef","handleAddTodo","current","value","prevTodos","toggleTodo","newTodos","todo","find","children","fileName","_jsxFileName","lineNumber","columnNumber","type","ref","onClick","_c","$RefreshReg$"],"sources":["/Users/user/Documents/study2023/react-todo/src/App.js"],"sourcesContent":["import { useState, useRef } from \"react\";\nimport TodoList from \"./TodoList\";\nimport { v4 as uuidv4 } from \"uuid\"; //ランダムな文字列生成される\n\nfunction App() {\n\n  const [todos, setTodos] = useState([\n    {id:1, name:\"Todo1\", completed:false},\n  ]);\n  // useState=>変数を管理するためのものフックス\n  // todos=>追加していくタスク（オブジェクト）\n  // todosが更新されたら画面が再レンダリングされる（更新される）\n  // つまり無駄な再レンダリングを防げる\n  // setTodos=>todosの中身を更新したいときに使う関数\n\n  const todoNameRef = useRef();\n  // useRef使えば簡単に要素（文字列）を取得できる\n\n  const handleAddTodo = () => {\n    //タスクを追加する\n\n    const name = todoNameRef.current.value; //入力した文字列取得\n\n    setTodos((prevTodos) => {\n      return [...prevTodos, {id: uuidv4(), name: name, completed: false}]\n      // ...prevTodos=>今あるタスクたち\n      // {}内=>プラスで追加するタスク\n    });\n\n    todoNameRef.current.value = null; //なぜヌル？\n\n  };\n\n  const toggleTodo = (id) => { //idでどのタスクにチェック入れるのか判別\n    const newTodos = [...todos]; //todosの中のオブジェクトをnewTodosにコピー。\n    const todo = newTodos.find((todo) => todo.id === id);\n  };\n\n  return (\n    <div> {/* このdiv削除するとエラーなる */}\n      <TodoList todos={todos} /> {/* todosという名前でtodosという変数を渡してあげてね */}\n      <input type=\"text\" ref={todoNameRef} /> {/* 入力した文字をtodoNameRef関数で取得 */}\n      <button onClick={handleAddTodo}>タスクを追加</button>\n      <button>完了したタスクの削除</button>\n      <div>残りのタスク:0</div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AACxC,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,CACjC;IAACW,EAAE,EAAC,CAAC;IAAEC,IAAI,EAAC,OAAO;IAAEC,SAAS,EAAC;EAAK,CAAC,CACtC,CAAC;EACF;EACA;EACA;EACA;EACA;;EAEA,MAAMC,WAAW,GAAGb,MAAM,CAAC,CAAC;EAC5B;;EAEA,MAAMc,aAAa,GAAGA,CAAA,KAAM;IAC1B;;IAEA,MAAMH,IAAI,GAAGE,WAAW,CAACE,OAAO,CAACC,KAAK,CAAC,CAAC;;IAExCP,QAAQ,CAAEQ,SAAS,IAAK;MACtB,OAAO,CAAC,GAAGA,SAAS,EAAE;QAACP,EAAE,EAAEP,MAAM,CAAC,CAAC;QAAEQ,IAAI,EAAEA,IAAI;QAAEC,SAAS,EAAE;MAAK,CAAC,CAAC;MACnE;MACA;IACF,CAAC,CAAC;;IAEFC,WAAW,CAACE,OAAO,CAACC,KAAK,GAAG,IAAI,CAAC,CAAC;EAEpC,CAAC;;EAED,MAAME,UAAU,GAAIR,EAAE,IAAK;IAAE;IAC3B,MAAMS,QAAQ,GAAG,CAAC,GAAGX,KAAK,CAAC,CAAC,CAAC;IAC7B,MAAMY,IAAI,GAAGD,QAAQ,CAACE,IAAI,CAAED,IAAI,IAAKA,IAAI,CAACV,EAAE,KAAKA,EAAE,CAAC;EACtD,CAAC;EAED,oBACEL,OAAA;IAAAiB,QAAA,GAAK,GAAC,eACJjB,OAAA,CAACJ,QAAQ;MAACO,KAAK,EAAEA;IAAM;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,KAAC,eAC3BrB,OAAA;MAAOsB,IAAI,EAAC,MAAM;MAACC,GAAG,EAAEf;IAAY;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,KAAC,eACxCrB,OAAA;MAAQwB,OAAO,EAAEf,aAAc;MAAAQ,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC/CrB,OAAA;MAAAiB,QAAA,EAAQ;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC3BrB,OAAA;MAAAiB,QAAA,EAAK;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChB,CAAC;AAEV;AAACnB,EAAA,CA3CQD,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AA2CX;AAED,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}