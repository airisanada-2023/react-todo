{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/study2023/react-todo/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef } from \"react\";\nimport TodoList from \"./TodoList\";\nimport { v4 as uuidv4 } from \"uuid\"; //ランダムな文字列生成される\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [todos, setTodos] = useState([]);\n  // useState=>変数を管理するためのものフックス\n  // todos=>追加していくタスク（オブジェクト）\n  // todosが更新されたら画面が再レンダリングされる（更新される）\n  // つまり無駄な再レンダリングを防げる\n  // setTodos=>todosの中身を更新したいときに使う関数\n\n  const todoNameRef = useRef();\n  // useRef使えば簡単に要素（文字列）を取得できる\n\n  const handleAddTodo = () => {\n    //タスクを追加する\n\n    const name = todoNameRef.current.value; //入力した文字列取得\n\n    setTodos(prevTodos => {\n      return [...prevTodos, {\n        id: uuidv4(),\n        name: name,\n        completed: false\n      }];\n      // ...prevTodos=>今あるタスクたち\n      // {}内=>プラスで追加するタスク\n    });\n\n    todoNameRef.current.value = null; //なぜヌル？\n  };\n\n  const toggleTodo = id => {\n    //idでどのタスクにチェック入れるのか判別\n    const newTodos = [...todos]; //todosの中のオブジェクトをnewTodosにコピー。\n    const todo = newTodos.find(todo => todo.id === id); //各todoの中で引数のidと同じidを持つものを探し、const todoのtodoに代入\n    todo.completed = !todo.completed;\n    setTodos(newTodos); //todoリストの更新\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\" \", /*#__PURE__*/_jsxDEV(TodoList, {\n      todos: todos,\n      toggleTodo: toggleTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: todoNameRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddTodo,\n      children: \"\\u30BF\\u30B9\\u30AF\\u3092\\u8FFD\\u52A0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClear,\n      children: \"\\u5B8C\\u4E86\\u3057\\u305F\\u30BF\\u30B9\\u30AF\\u306E\\u524A\\u9664\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\u6B8B\\u308A\\u306E\\u30BF\\u30B9\\u30AF:\", todos.filter(todo => !todo.completed).length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Co+oX9O3pMnlY40DokhjoAfbhpA=\");\n_c = App;\n;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useRef","TodoList","v4","uuidv4","jsxDEV","_jsxDEV","App","_s","todos","setTodos","todoNameRef","handleAddTodo","name","current","value","prevTodos","id","completed","toggleTodo","newTodos","todo","find","children","fileName","_jsxFileName","lineNumber","columnNumber","type","ref","onClick","handleClear","filter","length","_c","$RefreshReg$"],"sources":["/Users/user/Documents/study2023/react-todo/src/App.js"],"sourcesContent":["import { useState, useRef } from \"react\";\nimport TodoList from \"./TodoList\";\nimport { v4 as uuidv4 } from \"uuid\"; //ランダムな文字列生成される\n\nfunction App() {\n\n  const [todos, setTodos] = useState([]);\n  // useState=>変数を管理するためのものフックス\n  // todos=>追加していくタスク（オブジェクト）\n  // todosが更新されたら画面が再レンダリングされる（更新される）\n  // つまり無駄な再レンダリングを防げる\n  // setTodos=>todosの中身を更新したいときに使う関数\n\n  const todoNameRef = useRef();\n  // useRef使えば簡単に要素（文字列）を取得できる\n\n  const handleAddTodo = () => {\n    //タスクを追加する\n\n    const name = todoNameRef.current.value; //入力した文字列取得\n\n    setTodos((prevTodos) => {\n      return [...prevTodos, {id: uuidv4(), name: name, completed: false}]\n      // ...prevTodos=>今あるタスクたち\n      // {}内=>プラスで追加するタスク\n    });\n\n    todoNameRef.current.value = null; //なぜヌル？\n\n  };\n\n  const toggleTodo = (id) => { //idでどのタスクにチェック入れるのか判別\n    const newTodos = [...todos]; //todosの中のオブジェクトをnewTodosにコピー。\n    const todo = newTodos.find((todo) => todo.id === id); //各todoの中で引数のidと同じidを持つものを探し、const todoのtodoに代入\n    todo.completed = !todo.completed;\n    setTodos(newTodos); //todoリストの更新\n  };\n\n  return (\n    <div> {/* このdiv削除するとエラーなる */}\n      <TodoList todos={todos} toggleTodo={toggleTodo} /> {/* todosという名前でtodosという変数を渡してあげてね */}\n      <input type=\"text\" ref={todoNameRef} /> {/* 入力した文字をtodoNameRef関数で取得 */}\n      <button onClick={handleAddTodo}>タスクを追加</button>\n      <button onClick={handleClear}>完了したタスクの削除</button>\n      <div>残りのタスク:{todos.filter((todo) => !todo.completed).length}</div> {/* falseのものだけをフィルタリングする（残す） */}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AACxC,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC;EACA;EACA;EACA;EACA;;EAEA,MAAMW,WAAW,GAAGV,MAAM,CAAC,CAAC;EAC5B;;EAEA,MAAMW,aAAa,GAAGA,CAAA,KAAM;IAC1B;;IAEA,MAAMC,IAAI,GAAGF,WAAW,CAACG,OAAO,CAACC,KAAK,CAAC,CAAC;;IAExCL,QAAQ,CAAEM,SAAS,IAAK;MACtB,OAAO,CAAC,GAAGA,SAAS,EAAE;QAACC,EAAE,EAAEb,MAAM,CAAC,CAAC;QAAES,IAAI,EAAEA,IAAI;QAAEK,SAAS,EAAE;MAAK,CAAC,CAAC;MACnE;MACA;IACF,CAAC,CAAC;;IAEFP,WAAW,CAACG,OAAO,CAACC,KAAK,GAAG,IAAI,CAAC,CAAC;EAEpC,CAAC;;EAED,MAAMI,UAAU,GAAIF,EAAE,IAAK;IAAE;IAC3B,MAAMG,QAAQ,GAAG,CAAC,GAAGX,KAAK,CAAC,CAAC,CAAC;IAC7B,MAAMY,IAAI,GAAGD,QAAQ,CAACE,IAAI,CAAED,IAAI,IAAKA,IAAI,CAACJ,EAAE,KAAKA,EAAE,CAAC,CAAC,CAAC;IACtDI,IAAI,CAACH,SAAS,GAAG,CAACG,IAAI,CAACH,SAAS;IAChCR,QAAQ,CAACU,QAAQ,CAAC,CAAC,CAAC;EACtB,CAAC;;EAED,oBACEd,OAAA;IAAAiB,QAAA,GAAK,GAAC,eACJjB,OAAA,CAACJ,QAAQ;MAACO,KAAK,EAAEA,KAAM;MAACU,UAAU,EAAEA;IAAW;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,KAAC,eACnDrB,OAAA;MAAOsB,IAAI,EAAC,MAAM;MAACC,GAAG,EAAElB;IAAY;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,KAAC,eACxCrB,OAAA;MAAQwB,OAAO,EAAElB,aAAc;MAAAW,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC/CrB,OAAA;MAAQwB,OAAO,EAAEC,WAAY;MAAAR,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACjDrB,OAAA;MAAAiB,QAAA,GAAK,uCAAO,EAACd,KAAK,CAACuB,MAAM,CAAEX,IAAI,IAAK,CAACA,IAAI,CAACH,SAAS,CAAC,CAACe,MAAM;IAAA;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,KAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChE,CAAC;AAEV;AAACnB,EAAA,CA3CQD,GAAG;AAAA2B,EAAA,GAAH3B,GAAG;AA2CX;AAED,eAAeA,GAAG;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}